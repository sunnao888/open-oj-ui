import {
  English
} from "./chunk-LX55D3CK.js";
import {
  get_default
} from "./chunk-VQA6AZPL.js";
import {
  computed,
  inject,
  isRef,
  ref,
  unref
} from "./chunk-ZLVVKZUX.js";

// ../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/node_modules/element-plus/es/hooks/use-locale/index.mjs
var buildTranslator = (locale) => (path, option) => translate(path, option, unref(locale));
var translate = (path, option, locale) => get_default(locale, path, path).replace(/\{(\w+)\}/g, (_, key) => {
  var _a;
  return `${(_a = option == null ? void 0 : option[key]) != null ? _a : `{${key}}`}`;
});
var buildLocaleContext = (locale) => {
  const lang = computed(() => unref(locale).name);
  const localeRef = isRef(locale) ? locale : ref(locale);
  return {
    lang,
    locale: localeRef,
    t: buildTranslator(locale)
  };
};
var localeContextKey = Symbol("localeContextKey");
var useLocale = (localeOverrides) => {
  const locale = localeOverrides || inject(localeContextKey, ref());
  return buildLocaleContext(computed(() => locale.value || English));
};

export {
  buildTranslator,
  translate,
  buildLocaleContext,
  localeContextKey,
  useLocale
};
//# sourceMappingURL=chunk-CNLSHQ3Y.js.map
