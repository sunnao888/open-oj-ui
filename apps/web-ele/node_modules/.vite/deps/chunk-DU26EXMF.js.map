{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/input/src/utils.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/input/src/input.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/hooks/use-attrs/index.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/hooks/use-cursor/index.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/input/src/input.vue", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/input/index.ts"],
  "sourcesContent": ["import { isFirefox, isNumber } from '@element-plus/utils'\n\nlet hiddenTextarea: HTMLTextAreaElement | undefined = undefined\n\nconst HIDDEN_STYLE = {\n  height: '0',\n  visibility: 'hidden',\n  overflow: isFirefox() ? '' : 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0',\n}\n\nconst CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\ntype NodeStyle = {\n  contextStyle: string[][]\n  boxSizing: string\n  paddingSize: number\n  borderSize: number\n}\n\ntype TextAreaHeight = {\n  height: string\n  minHeight?: string\n}\n\nfunction calculateNodeStyling(targetElement: Element): NodeStyle {\n  const style = window.getComputedStyle(targetElement)\n\n  const boxSizing = style.getPropertyValue('box-sizing')\n\n  const paddingSize =\n    Number.parseFloat(style.getPropertyValue('padding-bottom')) +\n    Number.parseFloat(style.getPropertyValue('padding-top'))\n\n  const borderSize =\n    Number.parseFloat(style.getPropertyValue('border-bottom-width')) +\n    Number.parseFloat(style.getPropertyValue('border-top-width'))\n\n  const contextStyle = CONTEXT_STYLE.map((name) => [\n    name,\n    style.getPropertyValue(name),\n  ])\n\n  return { contextStyle, paddingSize, borderSize, boxSizing }\n}\n\nexport function calcTextareaHeight(\n  targetElement: HTMLTextAreaElement,\n  minRows = 1,\n  maxRows?: number\n): TextAreaHeight {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea')\n    document.body.appendChild(hiddenTextarea)\n  }\n\n  const { paddingSize, borderSize, boxSizing, contextStyle } =\n    calculateNodeStyling(targetElement)\n\n  contextStyle.forEach(([key, value]) =>\n    hiddenTextarea?.style.setProperty(key, value)\n  )\n\n  Object.entries(HIDDEN_STYLE).forEach(([key, value]) =>\n    hiddenTextarea?.style.setProperty(key, value, 'important')\n  )\n\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || ''\n\n  let height = hiddenTextarea.scrollHeight\n  const result = {} as TextAreaHeight\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize\n  }\n\n  hiddenTextarea.value = ''\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize\n\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize\n    }\n    height = Math.max(minHeight, height)\n    result.minHeight = `${minHeight}px`\n  }\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize\n    }\n    height = Math.min(maxHeight, height)\n  }\n  result.height = `${height}px`\n  hiddenTextarea.parentNode?.removeChild(hiddenTextarea)\n  hiddenTextarea = undefined\n\n  return result\n}\n", "import {\n  buildProps,\n  definePropType,\n  iconPropType,\n  isString,\n  mutable,\n} from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\n\nexport type InputAutoSize = { minRows?: number; maxRows?: number } | boolean\n\nexport const inputProps = buildProps({\n  /**\n   * @description native input id\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description input box size\n   */\n  size: useSizeProp,\n  /**\n   * @description whether to disable\n   */\n  disabled: Boolean,\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: definePropType<string | number | null | undefined>([\n      String,\n      Number,\n      Object,\n    ]),\n    default: '',\n  },\n  /**\n   * @description same as `maxlength` in native input\n   */\n  maxlength: {\n    type: [String, Number],\n  },\n  /**\n   * @description same as `minlength` in native input\n   */\n  minlength: {\n    type: [String, Number],\n  },\n  /**\n   * @description type of input\n   */\n  type: {\n    type: String,\n    default: 'text',\n  },\n  /**\n   * @description control the resizability\n   */\n  resize: {\n    type: String,\n    values: ['none', 'both', 'horizontal', 'vertical'],\n  },\n  /**\n   * @description whether textarea has an adaptive height\n   */\n  autosize: {\n    type: definePropType<InputAutoSize>([Boolean, Object]),\n    default: false,\n  },\n  /**\n   * @description native input autocomplete\n   */\n  autocomplete: {\n    type: String,\n    default: 'off',\n  },\n  /**\n   * @description format content\n   */\n  formatter: {\n    type: Function,\n  },\n  /**\n   * @description parse content\n   */\n  parser: {\n    type: Function,\n  },\n  /**\n   * @description placeholder\n   */\n  placeholder: {\n    type: String,\n  },\n  /**\n   * @description native input form\n   */\n  form: {\n    type: String,\n  },\n  /**\n   * @description native input readonly\n   */\n  readonly: Boolean,\n  /**\n   * @description native input readonly\n   */\n  clearable: Boolean,\n  /**\n   * @description toggleable password input\n   */\n  showPassword: Boolean,\n  /**\n   * @description word count\n   */\n  showWordLimit: Boolean,\n  /**\n   * @description suffix icon\n   */\n  suffixIcon: {\n    type: iconPropType,\n  },\n  /**\n   * @description prefix icon\n   */\n  prefixIcon: {\n    type: iconPropType,\n  },\n  /**\n   * @description container role, internal properties provided for use by the picker component\n   */\n  containerRole: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description input tabindex\n   */\n  tabindex: {\n    type: [String, Number],\n    default: 0,\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description input or textarea element style\n   */\n  inputStyle: {\n    type: definePropType<StyleValue>([Object, Array, String]),\n    default: () => mutable({} as const),\n  },\n  /**\n   * @description native input autofocus\n   */\n  autofocus: Boolean,\n  rows: {\n    type: Number,\n    default: 2,\n  },\n  ...useAriaProps(['ariaLabel']),\n} as const)\nexport type InputProps = ExtractPropTypes<typeof inputProps>\n\nexport const inputEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: (evt: MouseEvent) => evt instanceof MouseEvent,\n  mouseenter: (evt: MouseEvent) => evt instanceof MouseEvent,\n  // NOTE: when autofill by browser, the keydown event is instanceof Event, not KeyboardEvent\n  // relative bug report https://github.com/element-plus/element-plus/issues/6665\n  keydown: (evt: KeyboardEvent | Event) => evt instanceof Event,\n  compositionstart: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionupdate: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionend: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n}\nexport type InputEmits = typeof inputEmits\n", "import { computed, getCurrentInstance } from 'vue'\nimport { fromPairs } from 'lodash-unified'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { ComputedRef } from 'vue'\n\ninterface Params {\n  excludeListeners?: boolean\n  excludeKeys?: ComputedRef<string[]>\n}\n\nconst DEFAULT_EXCLUDE_KEYS = ['class', 'style']\nconst LISTENER_PREFIX = /^on[A-Z]/\n\nexport const useAttrs = (\n  params: Params = {}\n): ComputedRef<Record<string, unknown>> => {\n  const { excludeListeners = false, excludeKeys } = params\n  const allExcludeKeys = computed<string[]>(() => {\n    return (excludeKeys?.value || []).concat(DEFAULT_EXCLUDE_KEYS)\n  })\n\n  const instance = getCurrentInstance()\n  if (!instance) {\n    debugWarn(\n      'use-attrs',\n      'getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function'\n    )\n    return computed(() => ({}))\n  }\n\n  return computed(() =>\n    fromPairs(\n      Object.entries(instance.proxy?.$attrs!).filter(\n        ([key]) =>\n          !allExcludeKeys.value.includes(key) &&\n          !(excludeListeners && LISTENER_PREFIX.test(key))\n      )\n    )\n  )\n}\n", "import type { ShallowRef } from 'vue'\n\ninterface SelectionInfo {\n  selectionStart?: number\n  selectionEnd?: number\n  value?: string\n  beforeTxt?: string\n  afterTxt?: string\n}\n\n// Keep input cursor in the correct position when we use formatter.\nexport function useCursor(\n  input: ShallowRef<HTMLInputElement | undefined>\n): [() => void, () => void] {\n  let selectionInfo: SelectionInfo\n  function recordCursor() {\n    if (input.value == undefined) return\n\n    const { selectionStart, selectionEnd, value } = input.value\n\n    if (selectionStart == null || selectionEnd == null) return\n\n    const beforeTxt = value.slice(0, Math.max(0, selectionStart))\n    const afterTxt = value.slice(Math.max(0, selectionEnd))\n\n    selectionInfo = {\n      selectionStart,\n      selectionEnd,\n      value,\n      beforeTxt,\n      afterTxt,\n    }\n  }\n  function setCursor() {\n    if (input.value == undefined || selectionInfo == undefined) return\n\n    const { value } = input.value\n    const { beforeTxt, afterTxt, selectionStart } = selectionInfo\n\n    if (\n      beforeTxt == undefined ||\n      afterTxt == undefined ||\n      selectionStart == undefined\n    )\n      return\n\n    let startPos = value.length\n\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length\n    } else {\n      const beforeLastChar = beforeTxt[selectionStart - 1]\n      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1)\n      if (newIndex !== -1) {\n        startPos = newIndex + 1\n      }\n    }\n\n    input.value.setSelectionRange(startPos, startPos)\n  }\n\n  return [recordCursor, setCursor]\n}\n", "<template>\n  <div\n    :class=\"[\n      containerKls,\n      {\n        [nsInput.bm('group', 'append')]: $slots.append,\n        [nsInput.bm('group', 'prepend')]: $slots.prepend,\n      },\n    ]\"\n    :style=\"containerStyle\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <div ref=\"wrapperRef\" :class=\"wrapperKls\">\n        <!-- prefix slot -->\n        <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n          <span :class=\"nsInput.e('prefix-inner')\">\n            <slot name=\"prefix\" />\n            <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"prefixIcon\" />\n            </el-icon>\n          </span>\n        </span>\n\n        <input\n          :id=\"inputId\"\n          ref=\"input\"\n          :class=\"nsInput.e('inner')\"\n          v-bind=\"attrs\"\n          :minlength=\"minlength\"\n          :maxlength=\"maxlength\"\n          :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n          :disabled=\"inputDisabled\"\n          :readonly=\"readonly\"\n          :autocomplete=\"autocomplete\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"ariaLabel\"\n          :placeholder=\"placeholder\"\n          :style=\"inputStyle\"\n          :form=\"form\"\n          :autofocus=\"autofocus\"\n          :role=\"containerRole\"\n          @compositionstart=\"handleCompositionStart\"\n          @compositionupdate=\"handleCompositionUpdate\"\n          @compositionend=\"handleCompositionEnd\"\n          @input=\"handleInput\"\n          @change=\"handleChange\"\n          @keydown=\"handleKeydown\"\n        />\n\n        <!-- suffix slot -->\n        <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n          <span :class=\"nsInput.e('suffix-inner')\">\n            <template\n              v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\"\n            >\n              <slot name=\"suffix\" />\n              <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n                <component :is=\"suffixIcon\" />\n              </el-icon>\n            </template>\n            <el-icon\n              v-if=\"showClear\"\n              :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n              @mousedown.prevent=\"NOOP\"\n              @click=\"clear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-if=\"showPwdVisible\"\n              :class=\"[nsInput.e('icon'), nsInput.e('password')]\"\n              @click=\"handlePasswordVisible\"\n            >\n              <component :is=\"passwordIcon\" />\n            </el-icon>\n            <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n              <span :class=\"nsInput.e('count-inner')\">\n                {{ textLength }} / {{ maxlength }}\n              </span>\n            </span>\n            <el-icon\n              v-if=\"validateState && validateIcon && needStatusIcon\"\n              :class=\"[\n                nsInput.e('icon'),\n                nsInput.e('validateIcon'),\n                nsInput.is('loading', validateState === 'validating'),\n              ]\"\n            >\n              <component :is=\"validateIcon\" />\n            </el-icon>\n          </span>\n        </span>\n      </div>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        :id=\"inputId\"\n        ref=\"textarea\"\n        :class=\"[nsTextarea.e('inner'), nsInput.is('focus', isFocused)]\"\n        v-bind=\"attrs\"\n        :minlength=\"minlength\"\n        :maxlength=\"maxlength\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"textareaStyle\"\n        :aria-label=\"ariaLabel\"\n        :placeholder=\"placeholder\"\n        :form=\"form\"\n        :autofocus=\"autofocus\"\n        :rows=\"rows\"\n        :role=\"containerRole\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span\n        v-if=\"isWordLimitVisible\"\n        :style=\"countStyle\"\n        :class=\"nsInput.e('count')\"\n      >\n        {{ textLength }} / {{ maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  shallowRef,\n  toRef,\n  useAttrs as useRawAttrs,\n  useSlots,\n  watch,\n} from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  CircleClose,\n  Hide as IconHide,\n  View as IconView,\n} from '@element-plus/icons-vue'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport {\n  NOOP,\n  ValidateComponentsMap,\n  debugWarn,\n  isClient,\n  isObject,\n} from '@element-plus/utils'\nimport {\n  useAttrs,\n  useComposition,\n  useCursor,\n  useFocusController,\n  useNamespace,\n} from '@element-plus/hooks'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { calcTextareaHeight } from './utils'\nimport { inputEmits, inputProps } from './input'\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\nconst COMPONENT_NAME = 'ElInput'\ndefineOptions({\n  name: COMPONENT_NAME,\n  inheritAttrs: false,\n})\nconst props = defineProps(inputProps)\nconst emit = defineEmits(inputEmits)\n\nconst rawAttrs = useRawAttrs()\nconst attrs = useAttrs()\nconst slots = useSlots()\n\nconst containerKls = computed(() => [\n  props.type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n  nsInput.m(inputSize.value),\n  nsInput.is('disabled', inputDisabled.value),\n  nsInput.is('exceed', inputExceed.value),\n  {\n    [nsInput.b('group')]: slots.prepend || slots.append,\n    [nsInput.m('prefix')]: slots.prefix || props.prefixIcon,\n    [nsInput.m('suffix')]:\n      slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n    [nsInput.bm('suffix', 'password-clear')]:\n      showClear.value && showPwdVisible.value,\n    [nsInput.b('hidden')]: props.type === 'hidden',\n  },\n  rawAttrs.class,\n])\n\nconst wrapperKls = computed(() => [\n  nsInput.e('wrapper'),\n  nsInput.is('focus', isFocused.value),\n])\n\nconst { form: elForm, formItem: elFormItem } = useFormItem()\nconst { inputId } = useFormItemInputId(props, {\n  formItemContext: elFormItem,\n})\nconst inputSize = useFormSize()\nconst inputDisabled = useFormDisabled()\nconst nsInput = useNamespace('input')\nconst nsTextarea = useNamespace('textarea')\n\nconst input = shallowRef<HTMLInputElement>()\nconst textarea = shallowRef<HTMLTextAreaElement>()\n\nconst hovering = ref(false)\nconst passwordVisible = ref(false)\nconst countStyle = ref<StyleValue>()\nconst textareaCalcStyle = shallowRef(props.inputStyle)\n\nconst _ref = computed(() => input.value || textarea.value)\n\n// wrapperRef for type=\"text\", handleFocus and handleBlur for type=\"textarea\"\nconst { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(\n  _ref,\n  {\n    beforeFocus() {\n      return inputDisabled.value\n    },\n    afterBlur() {\n      if (props.validateEvent) {\n        elFormItem?.validate?.('blur').catch((err) => debugWarn(err))\n      }\n    },\n  }\n)\n\nconst needStatusIcon = computed(() => elForm?.statusIcon ?? false)\nconst validateState = computed(() => elFormItem?.validateState || '')\nconst validateIcon = computed(\n  () => validateState.value && ValidateComponentsMap[validateState.value]\n)\nconst passwordIcon = computed(() =>\n  passwordVisible.value ? IconView : IconHide\n)\nconst containerStyle = computed<StyleValue>(() => [\n  rawAttrs.style as StyleValue,\n])\nconst textareaStyle = computed<StyleValue>(() => [\n  props.inputStyle,\n  textareaCalcStyle.value,\n  { resize: props.resize },\n])\nconst nativeInputValue = computed(() =>\n  isNil(props.modelValue) ? '' : String(props.modelValue)\n)\nconst showClear = computed(\n  () =>\n    props.clearable &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (isFocused.value || hovering.value)\n)\nconst showPwdVisible = computed(\n  () =>\n    props.showPassword &&\n    !inputDisabled.value &&\n    !!nativeInputValue.value &&\n    (!!nativeInputValue.value || isFocused.value)\n)\nconst isWordLimitVisible = computed(\n  () =>\n    props.showWordLimit &&\n    !!props.maxlength &&\n    (props.type === 'text' || props.type === 'textarea') &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !props.showPassword\n)\nconst textLength = computed(() => nativeInputValue.value.length)\nconst inputExceed = computed(\n  () =>\n    // show exceed style if length of initial value greater then maxlength\n    !!isWordLimitVisible.value && textLength.value > Number(props.maxlength)\n)\nconst suffixVisible = computed(\n  () =>\n    !!slots.suffix ||\n    !!props.suffixIcon ||\n    showClear.value ||\n    props.showPassword ||\n    isWordLimitVisible.value ||\n    (!!validateState.value && needStatusIcon.value)\n)\n\nconst [recordCursor, setCursor] = useCursor(input)\n\nuseResizeObserver(textarea, (entries) => {\n  onceInitSizeTextarea()\n  if (!isWordLimitVisible.value || props.resize !== 'both') return\n  const entry = entries[0]\n  const { width } = entry.contentRect\n  countStyle.value = {\n    /** right: 100% - width + padding(15) + right(6) */\n    right: `calc(100% - ${width + 15 + 6}px)`,\n  }\n})\n\nconst resizeTextarea = () => {\n  const { type, autosize } = props\n\n  if (!isClient || type !== 'textarea' || !textarea.value) return\n\n  if (autosize) {\n    const minRows = isObject(autosize) ? autosize.minRows : undefined\n    const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n    const textareaStyle = calcTextareaHeight(textarea.value, minRows, maxRows)\n\n    // If the scrollbar is displayed, the height of the textarea needs more space than the calculated height.\n    // If set textarea height in this case, the scrollbar will not hide.\n    // So we need to hide scrollbar first, and reset it in next tick.\n    // see https://github.com/element-plus/element-plus/issues/8825\n    textareaCalcStyle.value = {\n      overflowY: 'hidden',\n      ...textareaStyle,\n    }\n\n    nextTick(() => {\n      // NOTE: Force repaint to make sure the style set above is applied.\n      textarea.value!.offsetHeight\n      textareaCalcStyle.value = textareaStyle\n    })\n  } else {\n    textareaCalcStyle.value = {\n      minHeight: calcTextareaHeight(textarea.value).minHeight,\n    }\n  }\n}\n\nconst createOnceInitResize = (resizeTextarea: () => void) => {\n  let isInit = false\n  return () => {\n    if (isInit || !props.autosize) return\n    const isElHidden = textarea.value?.offsetParent === null\n    if (!isElHidden) {\n      resizeTextarea()\n      isInit = true\n    }\n  }\n}\n// fix: https://github.com/element-plus/element-plus/issues/12074\nconst onceInitSizeTextarea = createOnceInitResize(resizeTextarea)\n\nconst setNativeInputValue = () => {\n  const input = _ref.value\n  const formatterValue = props.formatter\n    ? props.formatter(nativeInputValue.value)\n    : nativeInputValue.value\n  if (!input || input.value === formatterValue) return\n  input.value = formatterValue\n}\n\nconst handleInput = async (event: Event) => {\n  recordCursor()\n\n  let { value } = event.target as TargetElement\n\n  if (props.formatter && props.parser) {\n    value = props.parser(value)\n  }\n\n  // should not emit input during composition\n  // see: https://github.com/ElemeFE/element/issues/10516\n  if (isComposing.value) return\n\n  // hack for https://github.com/ElemeFE/element/issues/8548\n  // should remove the following line when we don't support IE\n  if (value === nativeInputValue.value) {\n    setNativeInputValue()\n    return\n  }\n\n  emit(UPDATE_MODEL_EVENT, value)\n  emit(INPUT_EVENT, value)\n\n  // ensure native input value is controlled\n  // see: https://github.com/ElemeFE/element/issues/12850\n  await nextTick()\n  setNativeInputValue()\n  setCursor()\n}\n\nconst handleChange = (event: Event) => {\n  let { value } = event.target as TargetElement\n\n  if (props.formatter && props.parser) {\n    value = props.parser(value)\n  }\n  emit(CHANGE_EVENT, value)\n}\n\nconst {\n  isComposing,\n  handleCompositionStart,\n  handleCompositionUpdate,\n  handleCompositionEnd,\n} = useComposition({ emit, afterComposition: handleInput })\n\nconst handlePasswordVisible = () => {\n  recordCursor()\n  passwordVisible.value = !passwordVisible.value\n  // The native input needs a little time to regain focus\n  setTimeout(setCursor)\n}\n\nconst focus = () => _ref.value?.focus()\n\nconst blur = () => _ref.value?.blur()\n\nconst handleMouseLeave = (evt: MouseEvent) => {\n  hovering.value = false\n  emit('mouseleave', evt)\n}\n\nconst handleMouseEnter = (evt: MouseEvent) => {\n  hovering.value = true\n  emit('mouseenter', evt)\n}\n\nconst handleKeydown = (evt: KeyboardEvent) => {\n  emit('keydown', evt)\n}\n\nconst select = () => {\n  _ref.value?.select()\n}\n\nconst clear = () => {\n  emit(UPDATE_MODEL_EVENT, '')\n  emit(CHANGE_EVENT, '')\n  emit('clear')\n  emit(INPUT_EVENT, '')\n}\n\nwatch(\n  () => props.modelValue,\n  () => {\n    nextTick(() => resizeTextarea())\n    if (props.validateEvent) {\n      elFormItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n\n// native input value is set explicitly\n// do not use v-model / :value in template\n// see: https://github.com/ElemeFE/element/issues/14521\nwatch(nativeInputValue, () => setNativeInputValue())\n\n// when change between <input> and <textarea>,\n// update DOM dependent value and styles\n// https://github.com/ElemeFE/element/issues/14857\nwatch(\n  () => props.type,\n  async () => {\n    await nextTick()\n    setNativeInputValue()\n    resizeTextarea()\n  }\n)\n\nonMounted(() => {\n  if (!props.formatter && props.parser) {\n    debugWarn(\n      COMPONENT_NAME,\n      'If you set the parser, you also need to set the formatter.'\n    )\n  }\n  setNativeInputValue()\n  nextTick(resizeTextarea)\n})\n\ndefineExpose({\n  /** @description HTML input element */\n  input,\n  /** @description HTML textarea element */\n  textarea,\n  /** @description HTML element, input or textarea */\n  ref: _ref,\n  /** @description style of textarea. */\n  textareaStyle,\n\n  /** @description from props (used on unit test) */\n  autosize: toRef(props, 'autosize'),\n\n  /** @description is input composing */\n  isComposing,\n\n  /** @description HTML input element native method */\n  focus,\n  /** @description HTML input element native method */\n  blur,\n  /** @description HTML input element native method */\n  select,\n  /** @description clear input value */\n  clear,\n  /** @description resize textarea. */\n  resizeTextarea,\n})\n</script>\n", "import { withInstall } from '@element-plus/utils'\nimport Input from './src/input.vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElInput: SFCWithInstall<typeof Input> = withInstall(Input)\nexport default ElInput\n\nexport * from './src/input'\nexport type { InputInstance } from './src/instance'\n"],
  "mappings": "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",
  "names": ["useAttrs", "useRawAttrs", "useAttrs", "IconView", "IconHide", "resizeTextarea", "input", "_openBlock", "_createElementBlock", "_normalizeClass", "_unref", "_normalizeStyle", "_createCommentVNode", "_Fragment", "_renderSlot", "_createElementVNode"]
}
