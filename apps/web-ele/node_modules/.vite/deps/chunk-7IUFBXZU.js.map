{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/checkbox.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/constants.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/composables/use-checkbox-disabled.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/composables/use-checkbox-event.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/composables/use-checkbox-model.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/composables/use-checkbox-status.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/composables/use-checkbox.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/checkbox.vue", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/checkbox-button.vue", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/checkbox-group.ts", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/src/checkbox-group.vue", "../../../../../node_modules/.pnpm/element-plus@2.9.9_vue@3.5.13_typescript@5.8.3_/packages/components/checkbox/index.ts"],
  "sourcesContent": ["import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { isBoolean, isNumber, isString } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type Checkbox from './checkbox.vue'\n\nexport type CheckboxValueType = string | number | boolean\n\nexport const checkboxProps = {\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: undefined,\n  },\n  /**\n   * @description label of the Checkbox when used inside a `checkbox-group`\n   */\n  label: {\n    type: [String, Boolean, Number, Object],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox when used inside a `checkbox-group`\n   */\n  value: {\n    type: [String, Boolean, Number, Object],\n    default: undefined,\n  },\n  /**\n   * @description Set indeterminate state, only responsible for style control\n   */\n  indeterminate: Boolean,\n  /**\n   * @description whether the Checkbox is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description if the Checkbox is checked\n   */\n  checked: Boolean,\n  /**\n   * @description native 'name' attribute\n   */\n  name: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's checked\n   */\n  trueValue: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's not checked\n   */\n  falseValue: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @deprecated use `trueValue` instead\n   * @description value of the Checkbox if it's checked\n   */\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @deprecated use `falseValue` instead\n   * @description value of the Checkbox if it's not checked\n   */\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description input id\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description whether to add a border around Checkbox\n   */\n  border: Boolean,\n  /**\n   * @description size of the Checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description input tabindex\n   */\n  tabindex: [String, Number],\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  ...useAriaProps(['ariaControls']),\n}\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox> & unknown\n", "import type { InjectionKey, ToRefs, WritableComputedRef } from 'vue'\nimport type { CheckboxGroupProps } from './checkbox-group'\n\ntype CheckboxGroupContext = {\n  modelValue?: WritableComputedRef<any>\n  changeEvent?: (...args: any) => any\n} & ToRefs<\n  Pick<\n    CheckboxGroupProps,\n    'size' | 'min' | 'max' | 'disabled' | 'validateEvent' | 'fill' | 'textColor'\n  >\n>\n\nexport const checkboxGroupContextKey: InjectionKey<CheckboxGroupContext> =\n  Symbol('checkboxGroupContextKey')\n", "import { computed, inject } from 'vue'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { isUndefined } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { CheckboxModel, CheckboxStatus } from '../composables'\n\nexport const useCheckboxDisabled = ({\n  model,\n  isChecked,\n}: Pick<CheckboxModel, 'model'> & Pick<CheckboxStatus, 'isChecked'>) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup?.max?.value\n    const min = checkboxGroup?.min?.value\n    return (\n      (!isUndefined(max) && model.value.length >= max && !isChecked.value) ||\n      (!isUndefined(min) && model.value.length <= min && isChecked.value)\n    )\n  })\n\n  const isDisabled = useFormDisabled(\n    computed(() => checkboxGroup?.disabled.value || isLimitDisabled.value)\n  )\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nexport type CheckboxDisabled = ReturnType<typeof useCheckboxDisabled>\n", "import { computed, getCurrentInstance, inject, nextTick, watch } from 'vue'\nimport { useFormItem } from '@element-plus/components/form'\nimport { debugWarn } from '@element-plus/utils'\nimport { CHANGE_EVENT } from '@element-plus/constants'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { useFormItemInputId } from '@element-plus/components/form'\nimport type { CheckboxProps } from '../checkbox'\nimport type {\n  CheckboxDisabled,\n  CheckboxModel,\n  CheckboxStatus,\n} from '../composables'\n\nexport const useCheckboxEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Pick<CheckboxModel, 'model' | 'isLimitExceeded'> &\n    Pick<CheckboxStatus, 'hasOwnLabel'> &\n    Pick<CheckboxDisabled, 'isDisabled'> &\n    Pick<ReturnType<typeof useFormItemInputId>, 'isLabeledByFormItem'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const { formItem } = useFormItem()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return [true, props.trueValue, props.trueLabel].includes(value)\n      ? props.trueValue ?? props.trueLabel ?? true\n      : props.falseValue ?? props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit(CHANGE_EVENT, getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded.value) return\n\n    const target = e.target as HTMLInputElement\n    emit(CHANGE_EVENT, getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded.value) return\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      // fix: https://github.com/element-plus/element-plus/issues/9981\n      const eventTargets: EventTarget[] = e.composedPath()\n      const hasLabel = eventTargets.some(\n        (item) => (item as HTMLElement).tagName === 'LABEL'\n      )\n      if (!hasLabel) {\n        model.value = getLabeledValue(\n          [false, props.falseValue, props.falseLabel].includes(model.value)\n        )\n        await nextTick()\n        emitChangeEvent(model.value, e)\n      }\n    }\n  }\n\n  const validateEvent = computed(\n    () => checkboxGroup?.validateEvent || props.validateEvent\n  )\n\n  watch(\n    () => props.modelValue,\n    () => {\n      if (validateEvent.value) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n", "import { computed, getCurrentInstance, inject, ref } from 'vue'\nimport { isArray, isUndefined } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { CheckboxProps } from '../checkbox'\n\nexport const useCheckboxModel = (props: CheckboxProps) => {\n  const selfModel = ref<unknown>(false)\n  const { emit } = getCurrentInstance()!\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isGroup = computed(() => isUndefined(checkboxGroup) === false)\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup?.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup?.max?.value !== undefined &&\n          val.length > checkboxGroup?.max.value &&\n          val.length > model.value.length\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val\n      }\n    },\n  })\n\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n  }\n}\n\nexport type CheckboxModel = ReturnType<typeof useCheckboxModel>\n", "import { computed, inject, ref, toRaw } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { useFormSize } from '@element-plus/components/form'\nimport { isArray, isBoolean, isObject, isPropAbsent } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nexport const useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isFocused = ref(false)\n  const actualValue = computed(() => {\n    // In version 2.x, if there's no props.value, props.label will act as props.value\n    // In version 3.x, remove this computed value, use props.value instead.\n    if (!isPropAbsent(props.value)) {\n      return props.value\n    }\n    return props.label\n  })\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (isBoolean(value)) {\n      return value\n    } else if (isArray(value)) {\n      if (isObject(actualValue.value)) {\n        return value.map(toRaw).some((o) => isEqual(o, actualValue.value))\n      } else {\n        return value.map(toRaw).includes(actualValue.value)\n      }\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueValue || value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxButtonSize = useFormSize(\n    computed(() => checkboxGroup?.size?.value),\n    {\n      prop: true,\n    }\n  )\n  const checkboxSize = useFormSize(computed(() => checkboxGroup?.size?.value))\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!slots.default || !isPropAbsent(actualValue.value)\n  })\n\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel,\n    actualValue,\n  }\n}\n\nexport type CheckboxStatus = ReturnType<typeof useCheckboxStatus>\n", "import { computed } from 'vue'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { isArray, isPropAbsent } from '@element-plus/utils'\nimport { useDeprecated } from '@element-plus/hooks'\nimport { useCheckboxDisabled } from './use-checkbox-disabled'\nimport { useCheckboxEvent } from './use-checkbox-event'\nimport { useCheckboxModel } from './use-checkbox-model'\nimport { useCheckboxStatus } from './use-checkbox-status'\nimport type { ComponentInternalInstance } from 'vue'\n\nimport type { CheckboxProps } from '../checkbox'\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { formItem: elFormItem } = useFormItem()\n  const { model, isGroup, isLimitExceeded } = useCheckboxModel(props)\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    actualValue,\n  } = useCheckboxStatus(props, slots, { model })\n  const { isDisabled } = useCheckboxDisabled({ model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  const setStoreValue = () => {\n    function addToStore() {\n      if (isArray(model.value) && !model.value.includes(actualValue.value)) {\n        model.value.push(actualValue.value)\n      } else {\n        model.value = props.trueValue ?? props.trueLabel ?? true\n      }\n    }\n    props.checked && addToStore()\n  }\n\n  setStoreValue()\n\n  useDeprecated(\n    {\n      from: 'label act as value',\n      replacement: 'value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => isGroup.value && isPropAbsent(props.value))\n  )\n\n  useDeprecated(\n    {\n      from: 'true-label',\n      replacement: 'true-value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => !!props.trueLabel)\n  )\n\n  useDeprecated(\n    {\n      from: 'false-label',\n      replacement: 'false-value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => !!props.falseLabel)\n  )\n\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    actualValue,\n    handleChange,\n    onClickRoot,\n  }\n}\n", "<template>\n  <component\n    :is=\"!hasOwnLabel && isLabeledByFormItem ? 'span' : 'label'\"\n    :class=\"compKls\"\n    :aria-controls=\"indeterminate ? ariaControls : null\"\n    @click=\"onClickRoot\"\n  >\n    <span :class=\"spanKls\">\n      <input\n        v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueValue ?? trueLabel ?? true\"\n        :false-value=\"falseValue ?? falseLabel ?? false\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <input\n        v-else\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"isDisabled\"\n        :value=\"actualValue\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span v-if=\"hasOwnLabel\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxEmits, checkboxProps } from './checkbox'\nimport { useCheckbox } from './composables'\n\ndefineOptions({\n  name: 'ElCheckbox',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  inputId,\n  isLabeledByFormItem,\n  isChecked,\n  isDisabled,\n  isFocused,\n  checkboxSize,\n  hasOwnLabel,\n  model,\n  actualValue,\n  handleChange,\n  onClickRoot,\n} = useCheckbox(props, slots)\n\nconst ns = useNamespace('checkbox')\n\nconst compKls = computed(() => {\n  return [\n    ns.b(),\n    ns.m(checkboxSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('bordered', props.border),\n    ns.is('checked', isChecked.value),\n  ]\n})\n\nconst spanKls = computed(() => {\n  return [\n    ns.e('input'),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('indeterminate', props.indeterminate),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n", "<template>\n  <label :class=\"labelKls\">\n    <input\n      v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueValue ?? trueLabel ?? true\"\n      :false-value=\"falseValue ?? falseLabel ?? false\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"actualValue\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from './constants'\nimport { useCheckbox } from './composables'\nimport { checkboxEmits, checkboxProps } from './checkbox'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  isFocused,\n  isChecked,\n  isDisabled,\n  checkboxButtonSize,\n  model,\n  actualValue,\n  handleChange,\n} = useCheckbox(props, slots)\nconst checkboxGroup = inject(checkboxGroupContextKey, undefined)\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n\nconst labelKls = computed(() => {\n  return [\n    ns.b('button'),\n    ns.bm('button', checkboxButtonSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n", "import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { buildProps, definePropType, isArray } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type checkboxGroup from './checkbox-group.vue'\nimport type { CheckboxValueType } from './checkbox'\n\nexport type CheckboxGroupValueType = Exclude<CheckboxValueType, boolean>[]\n\nexport const checkboxGroupProps = buildProps({\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: definePropType<CheckboxGroupValueType>(Array),\n    default: () => [],\n  },\n  /**\n   * @description whether the nesting checkboxes are disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description minimum number of checkbox checked\n   */\n  min: Number,\n  /**\n   * @description maximum number of checkbox checked\n   */\n  max: Number,\n  /**\n   * @description size of checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description border and background color when button is active\n   */\n  fill: String,\n  /**\n   * @description font color when button is active\n   */\n  textColor: String,\n  /**\n   * @description element tag of the checkbox group\n   */\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  ...useAriaProps(['ariaLabel']),\n} as const)\n\nexport const checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxGroupValueType) => isArray(val),\n  change: (val: CheckboxValueType[]) => isArray(val),\n}\n\nexport type CheckboxGroupProps = ExtractPropTypes<typeof checkboxGroupProps>\nexport type CheckboxGroupEmits = typeof checkboxGroupEmits\nexport type CheckboxGroupInstance = InstanceType<typeof checkboxGroup> & unknown\n", "<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"\n      !isLabeledByFormItem ? ariaLabel || 'checkbox-group' : undefined\n    \"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem?.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { pick } from 'lodash-unified'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { checkboxGroupEmits, checkboxGroupProps } from './checkbox-group'\nimport { checkboxGroupContextKey } from './constants'\n\nimport type { CheckboxGroupValueType } from './checkbox-group'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(checkboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\nconst ns = useNamespace('checkbox')\n\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = async (value: CheckboxGroupValueType) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  await nextTick()\n  emit(CHANGE_EVENT, value)\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxGroupValueType) {\n    changeEvent(val)\n  },\n})\n\nprovide(checkboxGroupContextKey, {\n  ...pick(toRefs(props), [\n    'size',\n    'min',\n    'max',\n    'disabled',\n    'validateEvent',\n    'fill',\n    'textColor',\n  ]),\n  modelValue,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Checkbox from './src/checkbox.vue'\nimport CheckboxButton from './src/checkbox-button.vue'\nimport CheckboxGroup from './src/checkbox-group.vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElCheckbox: SFCWithInstall<typeof Checkbox> & {\n  CheckboxButton: typeof CheckboxButton\n  CheckboxGroup: typeof CheckboxGroup\n} = withInstall(Checkbox, {\n  CheckboxButton,\n  CheckboxGroup,\n})\nexport default ElCheckbox\n\nexport const ElCheckboxButton: SFCWithInstall<typeof CheckboxButton> =\n  withNoopInstall(CheckboxButton)\nexport const ElCheckboxGroup: SFCWithInstall<typeof CheckboxGroup> =\n  withNoopInstall(CheckboxGroup)\n\nexport * from './src/checkbox-group'\nexport * from './src/checkbox'\nexport * from './src/constants'\n"],
  "mappings": "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",
  "names": ["_openBlock", "_createBlock", "_resolveDynamicComponent"]
}
